#!/usr/bin/env bash

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
now=`date +"%m_%d_%Y"`
VER="0.0.45"

BIN=/usr/bin

# Sets up all of the dependencies for tests across all the applications
setup_tests() {
    echo "--------------------------------------------"
    echo "Installing Python Test Harness..."
    if ! $(python -c "import nose" &> /dev/null); then
        sudo pip install nose
    fi

    if ! $(python -c "import coverage" &> /dev/null); then
        sudo pip install coverage
    fi
    
    echo "Installing PHP Test Harness..."
    if [ ! -f "/usr/local/bin/phpunit" ]; then
        cd /tmp
        wget http://pear.phpunit.de/get/phpunit.phar
        sudo chmod +x phpunit.phar
        sudo mv phpunit.phar /usr/local/bin/phpunit
    fi

    echo "Installing JavaScript Test Harness..."
    cd /tmp
    
    # Install git
    if [ ! -f "/usr/bin/git" ]; then
        sudo apt-get install -y git-core
    fi
    
    # Install and link phantomjs
    if [ ! -f "phantomjs-1.9.1-linux-x86_64.tar.bz2" ]; then
        wget https://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-x86_64.tar.bz2
        tar xvjf phantomjs-1.9.1-linux-x86_64.tar.bz2
        cd phantomjs-1.9.1-linux-x86_64
        sudo ln -sf `pwd`/bin/phantomjs /usr/local/bin/phantomjs
        cd ../
    fi
    
    # Install and link casperjs
    if [ ! -d "casperjs" ]; then
        git clone git://github.com/n1k0/casperjs.git
        cd casperjs
        sudo ln -sf `pwd`/bin/casperjs /usr/local/bin/casperjs
        cd ../
    fi

    cd /var/www

    echo "--------------------------------------------"
}

# Runs all available test types
run_all_tests() {
    client_tests
    python_tests
    php_tests
}

# Cleans up test installation
function test_clean() {
    echo "Cleaning up Test Environment"
    if [ -f "/tmp/phantomjs-1.9.1-linux-x86_64.tar.bz2" ]; then
        sudo rm -r /tmp/phantomjs*
    fi
    if [ -d "/tmp/casperjs" ]; then
        sudo rm -r /tmp/casperjs
    fi
    if [ -f "/usr/local/bin/phantomjs" ]; then
        sudo rm /usr/local/bin/phantomjs
    fi
    if [ -f "/usr/local/bin/casperjs" ]; then
        sudo rm /usr/local/bin/casperjs
    fi
    echo "Test Environment Clean"
}

# Runs python tests and outputs to XUnit format
function python_tests() {

    echo "------------------------------------------------------------"
    echo "                      Python Tests"
    echo "------------------------------------------------------------"
    echo

    cd /var/www/flaskapps/etl/ETL
    nosetests -v --exe --with-xunit --xunit-file=/var/www/logs/python_log_$now.xml --cover-xml --cover-xml-file=/var/www/logs/python_coverage_$now.xml
    cd /var/www

    echo
}

# Runs client tests and outputs XUnit format
function client_tests() {
	echo
	echo "------------------------------------------------------------"
	echo "                      Twine Client Tests"
	echo "------------------------------------------------------------"
	echo
	casperjs test /var/www/siv-v3/app/tests/ --xunit=js_log_$now.xml
	echo
}

# Runs PHP Tests and outputs to JSON format
function php_tests() {
    echo "------------------------------------------------------------"
    echo "                      PHP Tests"
    echo "------------------------------------------------------------"
    echo
    phpunit --verbose --log-json /var/www/logs/php_tests_$now.json /var/www/siv-v3/api/tests/
    echo
}

# Drops and loads up the Mongo collections for siv
function load_mongo() {
    echo "------------------------------------------------------------"
    echo "Searching for Mongo dumps (*.bson)"
    echo "(note: please ensure all bson files have their collection as their name, i.e. his.bson, de_urban.bson"
    cd /var/www/vagrant/src/mongo
    for f in *.bson; do
        echo "Processing $f..."
        COLLECTION=`basename $f .bson`
        mongo siv --eval "db.${COLLECTION}.drop()"
        mongorestore -d siv -c ${COLLECTION} /var/www/vagrant/src/mongo/${f}
        echo "Finished processing $f."
        echo
    done

    echo "Done loading mongo collections."
    echo "------------------------------------------------------------"
}

# Creates a new JS asset language by copying over the dev language folder
function new_client_lang() {
	echo "Creating language files for ${1}"
	if [ ! -d "var/www/siv-v3/assets/locales/${1}" ]; then
		cp -r /var/www/siv-v3/assets/locales/dev /var/www/siv-v3/assets/locales/$1
		echo "${1} created!"
	else
		echo "ERROR: ${1} already exists."
	fi
}

# Runs the application build and package phase
function run_build() {
    echo "------------------------------------------------------------"
    echo "                    Warning"
    echo "------------------------------------------------------------"

    echo "Building the Twine client libraries may take some time on
systems with a low amount of resources and depending on the
machines configuration. It is recommended that you use one
of the pre-built deploy backages instead of attempting to 
build the application, unless you are creating a new 
release package."

    echo

    echo "Do you want to continue (y/n)"
    read continue
    if [[ "$continue" != "y" ]]; then
        exit 1
    fi
    echo

    echo "Starting build"
}

# Install Language Tools
function install_lang_tools() {
	if [ ! -f "/usr/bin/i18next-conv" ]; then
		echo "---- Installing Client-side language tools ------------------------------"
		sudo apt-get install python-software-properties
		sudo add-apt-repository ppa:chris-lea/node.js
		sudo apt-get update
		sudo apt-get install nodejs
		sudo npm install i18next-conv -g
		echo "---- Installation Complete! ---------------------------------------------"
	else
		echo "---- Language Tools Present ---------------------------------------------"
	fi
}

# Convert all JSON files to PO files
function convert_po() {
	install_lang_tools
	echo "---- Converting Client-Side Languages to PO -----------------------------"
	echo
	echo "Running this tool will overwrite you current .po development files."
	echo "If you have any unsaved changes in these files they will be lost."
	echo
	echo "Do you want to continue (y/n)"
	read continue
	if [[ "$continue" != "y" ]]; then
			exit 1
	fi
	# Create the lang dev folder if it doesn't exist
	if [ ! -d "/var/www/lang-dev" ]; then
		mkdir -p /var/www/lang-dev
	fi

	REMOVAL_PATH="/var/www/siv-v3/assets/locales/"
	for f in /var/www/siv-v3/assets/locales/**/*.json; do
		filename=$(basename "$f")
		shortname="${filename%.*}"
		rem_start=${f#${REMOVAL_PATH}}
		lang=${rem_start%/${filename}}
		po_path="/var/www/lang-dev/$lang"
		if [ ! -d $po_path ]; then
			mkdir -p $po_path
		fi
		po_file_path="$po_path/$shortname.po"
		
		i18next-conv -l $lang -s $f -t $po_file_path --quiet
	done
	echo "  -- PO files are now available at /var/www/lang-dev"
	echo "---- Conversion Complete ------------------------------------------------"
}

# Convert PO files to client-side json files
function convert_json() {
	install_lang_tools
	echo "---- Converting Client-side PO files to JSON ----------------------------"
	echo
	echo "Running this tool will overwrite any files located in the assets/locales folder for siv-v3."
	echo "If you have any unsaved changes in these files they will be lost."
	echo
	echo "Do you want to continue (y/n)"
	read continue
	if [[ "$continue" != "y" ]]; then
			exit 1
	fi

	REMOVAL_PATH="/var/www/lang-dev/"
	for f in /var/www/lang-dev/**/*.po; do
		filename=$(basename "$f")
		shortname="${filename%.*}"
		rem_start=${f#${REMOVAL_PATH}}
		lang=${rem_start%/${filename}}
		json_path="/var/www/siv-v3/assets/locales/$lang"
		if [ ! -d $json_path ]; then
			mkdir -p $json_path
		fi
		json_file_path="$json_path/$shortname.json"

		i18next-conv -l $lang -s $f -t $json_file_path --quiet
	done
	echo "---- Conversion Complete! -----------------------------------------------"
}

# Reloads the MySQL Database
function relaod_mysql() {
	echo "Not Implemented: Under Development."
}

# Outputs the help info
function output_help() {
	echo "Usage: $0 [command] [--options]"
	echo
	echo "---- General -------------------------------------------------------------"
	echo
	echo "  --help             Outputs this help info"
	echo "  --check-deps       DEV: Check that all dependencies are installed."
	echo "  --clean            DEV: Clean up build artifacts"
	echo "  --build            DEV: Build and package the application for deployment."
	echo
	echo "---- Testing -------------------------------------------------------------"
	echo
	echo "  --test             Run tests"
	echo "  --test --js        Runs only JS Tests"
	echo "  --test --python    Runs only Python tests"
	echo "  --test --php       Runs only PHP tests"
	echo "  --test --none      Convencience for installing the test tools but run on tests"
	echo "  --test-clean       Cleans up test requirements"
	echo
	echo "---- Utilities -----------------------------------------------------------"
	echo
	echo "  --load-mongo       Reloads the Mongo collections in siv"
	echo "  --load-mysql       DEV: Reloads the MySQL Database"
	echo
	echo "--- Language -------------------------------------------------------------"
	echo
	echo "   --lang-install    Installs language tools into the environment."
	echo "   --convert-po      Converts JSON files to po format"
	echo "   --convert-json    Converts PO files to JSON format for 18next"
	echo "   --new-lang <lang> DEV: Sets up a new client-side language folder/files "
	echo
}

# Parses commands and routes them to appropariate functionality
# as defined above
if [ "$1" ]; then
	case $1 in
		"--convert-json")
			convert_json
			exit 0;;
		"--convert-po")
			convert_po
			exit 0;;
		"--lang-install")
			shift
			install_lang_tools
			exit 0
			;;
		"--new-lang")
			shift
			if [ "$2" ]; then
				new_client_lang $2
			else
				echo "ERROR: Please specify a language name (i.e. en-US, de-FR, etc...)"
				exit 1
			fi
			shift;;
		"--version")
			shift
			echo "Twine-Tools v${VER}"
			echo "Author: JDU"
			exit 0
			;;
		"--check-deps")
			shift
			echo "Checking Dependencies"
			pip freeze > /var/www/logs/pip_req.txt
			shift;;
		"--help")
			output_help
			exit 0;;
		"--build")
			run_build
			if [ "$2" ]; then
				echo $2
			fi
			shift;;
		"--test")
			setup_tests
			if [ $2 ]; then
				case $2 in
					"--python")
						python_tests
						shift;;
					"--php")
						php_tests
						shift;;
					"--js")
						client_tests
						shift;;
					"--none")
						exit 1;;
					*)
						echo "Unrecognized option passed to --test (--python, --php, --js are options)"
						exit 1;;
				esac
			else
				run_all_tests
			fi
			echo
			echo "Test output is available here: /var/www/logs/"
			shift;;
		"--test-clean")
			test_clean
			shift;;
		"--load-mongo")
			load_mongo
			shift;;
		"--clean")
			rm -r /var/www/logs/*.log
			rm -r /var/www/logs/*.xml
			rm -r /var/www/logs/*.json
			shift;;
		*)
			echo "Unrecognized option: $1"
			exit 1;;
	esac
fi




=======
#!/usr/bin/python

import getopt, sys, time, os, shutil, fnmatch, json
import subprocess, codecs, argparse, datetime
import ConfigParser

# Folder where test logs should be stored
LOG_FOLDER   = "/var/www/logs"
# The version of this tool
VER          = "0.1.0"
# Mongo db that should be used for reloading mongo
MONG_DB      = "siv"
# Default Lang source
LANG_JSON    = "/var/www/siv-v3/assets/locales/"
# Default lang destination
LANG_PO      = "/var/www/locale-dev/"
# SQL Source Path
SQL_FOLDER   = "/var/www/vagrant/src/sql"

def install_language_tools(args):
	""" Installs the tools needed for language conversion """
	if os.path.exists("/usr/bin/i18next-conv") is False:
		subprocess.call("sudo apt-get install -y python-software-properties", shell=True)
		subprocess.call("sudo add-apt-repository ppa:chris-lea/node.js", shell=True)
		subprocess.call("sudo apt-get update", shell=True)
		subprocess.call("sudo apt-get install -y nodejs", shell=True)
		subprocess.call("sudo npm install i18next-conv -g", shell=True)

def sql_apply_patches(args):
	print "----------------------------------------------------"
	print " Applying SQL patches"
	files = []
	for source_file, dir in findFiles(r'%s' % (SQL_FOLDER), 'siv.[0123456789][0123456789].sql'):
		files.append(source_file)

	sorted_list = sorted(list(files))

	for item in sorted_list:
		print " Applying patch: %s" % (item)
		command = "mysql -u root -ppwd --default_character_set utf8 < %s" % (item)
		subprocess.call(command, shell=True)
		print " %s applied." % (item)
	
	print ""
	print " Application of patches complete"
	print "----------------------------------------------------"


def lang_manager(args):
	""" Handles conversion back and forth of language files """
	install_language_tools(args)

	print "------------------------------------------------------"
	print " Converting Client-Side PO to JSON"
	print ""
	print (" Running this tool will overwrite any files\n"
		" located in the assets/locales folder in siv-v3.")
	print " If you have any unsaved changes they will be lost."
	print ""
	answer = raw_input(" Do you want to continue (y/n):")

	if answer != "y":
		print " Cancelled."
		return

	if args.dest is None and args.format == "json":
		args.dest = LANG_JSON
		args.src = LANG_PO
	elif args.dest is None and args.format == "po":
		args.dest = LANG_PO
		args.src = LANG_JSON

	source_type = ""
	source_ext = ""
	if args.format == "po":
		source_type = '*.json'
		source_ext = "json"
	elif args.format == "json":
		source_type = "*.po"
		source_ext = "po"

	for source_file, dir in findFiles(r'%s' % (args.src), source_type):
		filename = os.path.splitext(source_file)[0].split('/')[-1]

		file_replace = "%s.%s" % (filename, source_ext)
		path_string = source_file.replace(args.src, "").replace(file_replace, "")

		out_file = "%s.%s" % (filename, args.format)
		write_path = os.path.join(args.dest, path_string)
		write_file = os.path.join(write_path, out_file)

		# Create folder
		mkdir_cmd = "sudo mkdir -p %s" % (write_path)
		subprocess.call(mkdir_cmd, shell=True)

		convert_cmd = "sudo i18next-conv -l %s -s %s -t %s --quiet" % (path_string.rstrip('/'), source_file, write_file)
		subprocess.call(convert_cmd, shell=True)

	print ""
	print " Conversion Complete."
	print "------------------------------------------------------"

def generate_client_config(args):
	cfg_p = ConfigParser.ConfigParser()
	
	cfg_dict = {}

	cfg_p.read(args.src)

	source_config = cfg_p.items('client')
	for item in source_config:
		cfg_dict[item[0]] = item[1]

	for key in cfg_dict.keys():
		if cfg_dict[key] == "true":
			cfg_dict[key] = True

		if cfg_dict[key] == "false":
			cfg_dict[key] = False

	f = open(args.dest, 'w')
	f.write(json.dumps(cfg_dict, sort_keys=True, indent=4, separators=(',', ': ')))
	f.close()

def install_test_harness(args):
	""" Installs and sets up all the requirements for the test tools. """
	# Check to see if nose is installed
	try:
		import nose
	except ImportError:
		subprocess.call("sudo pip install nose")

	# Check to see if coverage is installed
	try:
		import coverage
	except ImportError:
		subprocess.call("sudo pip install coverage")

	# Check and install phpunit
	if os.path.exists("/usr/local/bin/phpunit") is False:
		subprocess.call("wget -P /tmp http://pear.phpunit.de/get/phpunit.phar", shell=True)
		subprocess.call("sudo chmod +x /tmp/phpunit.phar", shell=True)
		subprocess.call(" sudo mv /tmp/phpunit.phar /usr/local/bin/phpunit", shell=True)

	# Check and install git
	if os.path.exists("/usr/bin/git") is False:
		subprocess.call("sudo apt-get install -y git-core", shell=True)

	# Check and install phantomjs
	if os.path.exists("/usr/local/bin/phantomjs") is False:
		subprocess.call('wget -P /tmp https://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-x86_64.tar.bz2', shell=True)
		subprocess.call("mkdir /tmp/phantomjs", shell=True)
		subprocess.call("tar xvjf /tmp/phantomjs-1.9.1-linux-x86_64.tar.bz2 -C /tmp ", shell=True)
		subprocess.call("sudo ln -sf /tmp/phantomjs-1.9.1-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs", shell=True)

	# Check and install Casperjs
	if os.path.exists("/usr/local/bin/casperjs") is False:
		subprocess.call("git clone git://github.com/n1k0/casperjs.git /tmp/casperjs", shell=True)
		subprocess.call("sudo ln -sf /tmp/casperjs/bin/casperjs /usr/local/bin/casperjs")

def clean_test_logs():
	""" Cleans and removes the test xml and log files """
	for log_file, dir in findFiles(r'%s' % (LOG_FOLDER), '*.xml'):
		os.remove(log_file)

	for json_file, dir in findFiles(r'%s' % (LOG_FOLDER), '*.json'):
		os.remove(json_file)

def testing_tools(args):
	""" The main testing function, will run all tests and install
	test tools for the testing setup """

	if args.clean is True:
		clean_test_logs()
		return

	install_test_harness(args)

	# Figure out what options were passed
	if args.language == "all":
		run_python_tests(args)
		run_php_tests(args)
		run_js_tests(args)
	elif args.language == "python":
		run_python_tests(args)
	elif args.language == "php":
		run_php_tests(args)
	elif args.language == "js":
		run_js_tests(args)

def run_python_tests(args):
	""" Runs the python tests """
	install_test_harness(args)
	command = "nosetests -w /var/www/flaskapps/etl/ETL -v --exe --with-xunit --xunit-file=%s/python_log_%s.xml --cover-xml --cover-xml-file=%s/python_coverage_%s.xml" % (LOG_FOLDER, datetime.datetime.now().strftime("%Y-%m-%d"), LOG_FOLDER, datetime.datetime.now().strftime("%Y=%m-%d"))
	subprocess.call(command, shell=True)

def run_php_tests(args):
	""" Run the php tests """
	install_test_harness(args)
	command = "phpunit --verbose --log-json %s/php_tests_%s.json /var/www/siv-v3/api/tests/" % (LOG_FOLDER, datetime.datetime.now().strftime("%Y-%m-%d"))
	subprocess.call(command, shell=True)

def run_js_tests(args):
	""" Run the JavaScript Tests """
	install_test_harness(args)
	command = "casperjs test /var/www/siv-v3/app/tests/ --xunit=%s/js_log_%s.xml" % (LOG_FOLDER, datetime.datetime.now().strftime('%Y-%m-%d'))
	subprocess.call(command, shell=True)

def findFiles(path, filter):
	""" Utility function which finds files in a pth """
	for root, dirs, files in os.walk(path):
		for file in fnmatch.filter(files, filter):
			yield (os.path.join(root, file), root)

def reload_mongo_db(args):
	""" Reload the mongo database """
	print "----------------------------------------------------"
	print " Mongo DB Restore"
	print " Searching for mongo dumps (*.bson)"

	for bson_file, dir in findFiles(r'%s' % ("/var/www/vagrant/src/mongo"), '*.bson'):
		print " ~ Processing %s \n" % (bson_file)
		parts = bson_file.split('/')
		filename = parts[-1].split(".")[0]

		# Drop the current database
		drop_cmd = "mongo %s --eval 'db.%s.drop();'" % (MONG_DB, filename)
		subprocess.call(drop_cmd, shell=True)
		
		# Run the restore
		restore_cmd = "mongorestore -d %s -c %s %s" % (MONG_DB, filename, bson_file)
		subprocess.call(restore_cmd, shell=True)
		print " ~ Finished"

	print " Done reloading mongo"
	print "----------------------------------------------------"

def main():
	""" Responsible for parsing arguments and routing to appropriate functions """
	# Top-level parser
	parser = argparse.ArgumentParser(description="Twine Tools", prog="twine-tools")
	parser.add_argument("--foo", action="store_true", help="foo help")
	subparsers = parser.add_subparsers()

	# The Testing Tools
	parser_testing = subparsers.add_parser('test', help="Twine testing harness")
	parser_testing.add_argument('-l', '--language', 
		type=str, 
		help="The language to test. Default is 'all'",
		choices=["python","php","js","all"],
		default="all")
	parser_testing.add_argument('--clean',
		help="Remove all log files for tests",
		action="store_true")
	parser_testing.set_defaults(func=testing_tools)

	# Reloading Mongo Db
	parser_mongo = subparsers.add_parser("mongo-reload", help="Reloads the Mongo Databases")
	parser_mongo.set_defaults(func=reload_mongo_db)

	# Language Tools
	parser_lang = subparsers.add_parser("lang",
		help="Tools for dealing with language files.")
	parser_lang.add_argument('format',
		help="The format to convert to in dest. Required",
		choices=['po','json'])
	parser_lang.add_argument('-s', '--src',
		help="The location to get files from.")
	parser_lang.add_argument('-d', '--dest',
		help="The destination to write to.")
	parser_lang.set_defaults(func=lang_manager)

	# Generating Client config
	parser_config = subparsers.add_parser("generate-config",
		help="Generate the client-side config from siv.ini")
	parser_config.add_argument('-s', '--src',
		help="The path to the siv.ini file.",
		default="/var/www/siv-v3/siv.ini")
	parser_config.add_argument('-d', '--dest',
		help="The target file where the config file should be saved.",
		default="/var/www/siv-v3/app/config.json")
	parser_config.set_defaults(func=generate_client_config)

	# SQL Patching
	parser_sql_patch = subparsers.add_parser('sql-patch',
		help="Applies any patches of the format siv.[0-9].sql.")
	parser_sql_patch.set_defaults(func=sql_apply_patches)

	# Get the args
	args = parser.parse_args()
	# Run the appropriate function
	args.func(args)

	# Exit
	return 0

if __name__ == "__main__":
	""" The main application """
	rc = main()
	sys.exit( rc )
